CC = @CC@
INSTALL = @INSTALL@
PNG_LIBS = @PNG_LIBS@
TIFF_LIB = @TIFF_LIB@
JPEG_LIB = @JPEG_LIB@
LAPACK_LIBS = @LAPACK_LIBS@
OPENGL_LIBS = @OPENGL_LIBS@
GLUT_LIBS = @GLUT_LIBS@
X_LIBS = @X_LIBS@
prefix = @prefix@
includedir = @includedir@
exec_prefix = @exec_prefix@
libdir = @libdir@
LDFLAGS=@LDFLAGS@

include make.inc
include config

TOPLEVEL = .

# Gandalf source directories
SRCDIRS = common linalg image vision

# Rules to build subdirectories
.PHONY: subdirs $(SRCDIRS)
subdirs: $(SRCDIRS)
$(SRCDIRS):
	$(MAKE) -C $@

# Rule for compiling Gandalf library
gandalf: subdirs
	$(LIBTOOL) --mode=link $(CC) $(CFLAGS) -o libgandalf.la \
		common/*$(OBJECT_SUFFIX).lo linalg/*$(OBJECT_SUFFIX).lo \
		linalg/cblas/*$(OBJECT_SUFFIX).lo \
		linalg/clapack/*$(OBJECT_SUFFIX).lo \
		linalg/matrix/*$(OBJECT_SUFFIX).lo \
		image/*$(OBJECT_SUFFIX).lo image/io/*$(OBJECT_SUFFIX).lo \
		vision/*$(OBJECT_SUFFIX).lo \
		-version-info 2:1:1 -rpath $(DESTDIR)$(libdir) $(LDFLAGS) $(LIBS)

# Rule for compiling Gandalf library and test programs
all: gandalf

distclean: clean

clean:
	for f in $(SRCDIRS); do (cd $$f; $(MAKE) clean;) done
	(cd TestFramework; $(MAKE) clean;)
	rm -f TestOutput/*.*
	$(RM) -r libgandalf.la .libs
	$(RM) -f config.status config.log config.cache
	$(RM) *~

# Rule for installing Gandalf header files and library
install: install-header install-lib

install-header:
	@echo Installing the header files.
	if [ ! -d $(DESTDIR)$(includedir) ]; then mkdir -p $(DESTDIR)$(includedir); fi
	if [ ! -d $(DESTDIR)$(includedir)/gandalf ]; then mkdir $(DESTDIR)$(includedir)/gandalf; fi
	$(INSTALL) -m 644 config.h $(DESTDIR)$(includedir)/gandalf/
	for f in $(SRCDIRS); do (cd $$f; $(MAKE) install); done

install-lib:
	@echo Installing the library archive file.
	if [ ! -d $(DESTDIR)$(libdir) ]; then mkdir -p $(DESTDIR)$(libdir); fi
	$(LIBTOOL) --mode=install $(INSTALL) $(LIB) $(DESTDIR)$(libdir)/$(LIB)
	if [ -d .libs/*.dylib.dSYM ]; then cp -R .libs/*.dylib.dSYM $(DESTDIR)$(libdir)/; fi

# Rule for preprocessing Gandalf source prior to generating documentation
docsource:
	$(CC) -DNDEBUG preprocess.c -o preprocess
	for f in $(SRCDIRS); do (cd $$f; $(MAKE) docsource;) done
	for f in $(SRCDIRS); do (cd $$f; $(MAKE) docfinish;) done
